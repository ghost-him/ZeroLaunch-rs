name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'  # 当推送 v1.0.0 格式的标签时触发
  workflow_dispatch:  # 允许手动触发

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build Release
    runs-on: windows-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: x86_64-pc-windows-msvc,aarch64-pc-windows-msvc

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Copy i18n locales to src-tauri
        shell: pwsh
        run: |
          $srcLocalesDir = "src\i18n\locales"
          $destDir = "src-tauri\locales"
          if (-not (Test-Path $destDir)) {
            New-Item -Path $destDir -ItemType Directory -Force | Out-Null
          }
          Copy-Item -Path "$srcLocalesDir\*" -Destination $destDir -Force
          Write-Host "✓ i18n locales files copied to src-tauri/locales/"

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri -> target

      - name: Get version from tag
        id: get_version
        shell: pwsh
        run: |
          $tag = $env:GITHUB_REF -replace 'refs/tags/v', ''
          if ([string]::IsNullOrEmpty($tag)) {
            $tag = "0.0.0"
          }
          
          # 生成 yymmdd 格式的日期
          $date = Get-Date -Format "yyMMdd"
          $releaseTitle = "$date-v$tag"
          
          echo "VERSION=$tag" >> $env:GITHUB_OUTPUT
          echo "RELEASE_TITLE=$releaseTitle" >> $env:GITHUB_OUTPUT
          echo "Version: $tag"
          echo "Release Title: $releaseTitle"

      - name: Build all variants
        shell: pwsh
        run: |
          cd xtask
          # 构建所有架构和 AI 变体
          cargo run --bin xtask build-all --arch all --ai both
        
      - name: List build artifacts
        shell: pwsh
        run: |
          echo "=== Build artifacts ==="
          $files = Get-ChildItem -Path . -Include *.exe,*.msi,*.zip -File
          if ($files.Count -eq 0) {
            echo "❌ 错误：没有找到任何构建产物！"
            exit 1
          }
          echo "找到 $($files.Count) 个构建产物："
          $files | ForEach-Object {
            $sizeMB = [math]::Round($_.Length / 1MB, 2)
            echo "  ✅ $($_.Name) ($sizeMB MB)"
          }

      - name: Generate Release Notes
        id: release_notes
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $tag = "v$version"
          
          # 获取上一个标签
          $previousTag = git describe --tags --abbrev=0 "$tag^" 2>$null
          if ([string]::IsNullOrEmpty($previousTag)) {
            $previousTag = git rev-list --max-parents=0 HEAD
          }
          
          # 生成变更日志
          $commits = git log "$previousTag..$tag" --pretty=format:"* %s (%h)" --no-merges 2>$null
          if ([string]::IsNullOrEmpty($commits)) {
            $commits = git log -10 --pretty=format:"* %s (%h)" --no-merges
          }
          
          # 获取贡献者列表
          $contributors = git log "$previousTag..$tag" --pretty=format:"%an" --no-merges 2>$null | Sort-Object -Unique
          if ([string]::IsNullOrEmpty($contributors)) {
            $contributors = git log -10 --pretty=format:"%an" --no-merges | Sort-Object -Unique
          }
          
          # 构建 Release Notes
          $contributorsList = ($contributors | ForEach-Object { "* $_" }) -join "`n"
          $changelogUrl = "https://github.com/ghost-him/ZeroLaunch-rs/compare/$previousTag...$tag"
          
          $releaseNotes = "## What's Changed`n`n$commits`n`n## Contributors`n`n$contributorsList`n`n**Full Changelog**: $changelogUrl"
          
          # 输出到文件，避免多行字符串在 GitHub Actions 中的问题
          $releaseNotes | Out-File -FilePath "release_notes.txt" -Encoding UTF8
          echo "RELEASE_NOTES_FILE=release_notes.txt" >> $env:GITHUB_OUTPUT
          echo "Generated release notes"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.get_version.outputs.RELEASE_TITLE }}
          files: |
            *.exe
            *.msi
            *.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to Gitee
        if: success()
        shell: pwsh
        run: |
          # 配置 Gitee
          git config --global user.name "ghost-him"
          git config --global user.email "${{ secrets.GITEE_EMAIL }}"
          
          # 添加 Gitee 远程仓库
          git remote add gitee https://oauth2:${{ secrets.GITEE_TOKEN }}@gitee.com/ghost-him/ZeroLaunch-rs.git || true
          
          # 推送代码和标签到 Gitee
          git push gitee main --tags -f || echo "Failed to push to Gitee"
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}
          GITEE_EMAIL: ${{ secrets.GITEE_EMAIL }}

      - name: Create Gitee Release
        if: success()
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $releaseTitle = "${{ steps.get_version.outputs.RELEASE_TITLE }}"
          $tag = "v$version"
          
          # 读取生成的 Release Notes
          $releaseNotes = Get-Content -Path "release_notes.txt" -Raw -Encoding UTF8
          
          # 使用 Gitee API 创建 Release
          $headers = @{
            "Content-Type" = "application/json"
            "Authorization" = "token ${{ secrets.GITEE_TOKEN }}"
          }
          
          $body = @{
            tag_name = $tag
            name = $releaseTitle
            body = $releaseNotes
            prerelease = $false
          } | ConvertTo-Json
          
          try {
            # 先尝试删除旧的 Release，确保幂等性
            try {
              $deleteResponse = Invoke-RestMethod -Uri "https://gitee.com/api/v5/repos/ghost-him/ZeroLaunch-rs/releases/tags/$tag" -Method Get -Headers $headers -ErrorAction SilentlyContinue
              if ($deleteResponse) {
                Invoke-RestMethod -Uri "https://gitee.com/api/v5/repos/ghost-him/ZeroLaunch-rs/releases/$($deleteResponse.id)" -Method Delete -Headers $headers
                echo "已删除旧的 Gitee Release"
              }
            } catch {
              echo "没有旧的 Gitee Release 需要删除"
            }
            
            # 创建新的 Release
            $response = Invoke-RestMethod -Uri "https://gitee.com/api/v5/repos/ghost-him/ZeroLaunch-rs/releases" -Method Post -Headers $headers -Body $body
            $releaseId = $response.id
            echo "✅ Gitee Release 创建成功，ID: $releaseId"
            
            # 上传构建产物到 Gitee Release
            $files = Get-ChildItem -Path . -Include *.exe,*.msi,*.zip -File
            foreach ($file in $files) {
              echo "📦 正在上传 $($file.Name) 到 Gitee Release..."
              $uploadUrl = "https://gitee.com/api/v5/repos/ghost-him/ZeroLaunch-rs/releases/$releaseId/attach_files?access_token=${{ secrets.GITEE_TOKEN }}"
              
              # 使用 curl 上传文件（更可靠）
              curl.exe -X POST $uploadUrl -F "file=@$($file.FullName)" --silent --show-error
              
              if ($LASTEXITCODE -eq 0) {
                echo "✅ 已上传: $($file.Name)"
              } else {
                echo "❌ 上传失败: $($file.Name)"
                throw "Failed to upload $($file.Name) to Gitee"
              }
            }
            
            echo "✅ Gitee Release 所有文件上传完成"
          } catch {
            echo "❌ Gitee Release 创建或上传失败: $_"
            throw
          }
        env:
          GITEE_TOKEN: ${{ secrets.GITEE_TOKEN }}

      - name: Upload to GitCode
        if: success()
        shell: pwsh
        run: |
          # 配置 GitCode
          git config --global user.name "ghost-him"
          git config --global user.email "${{ secrets.GITCODE_EMAIL }}"
          
          # 添加 GitCode 远程仓库
          git remote add gitcode https://oauth2:${{ secrets.GITCODE_TOKEN }}@gitcode.com/ghost-him/ZeroLaunch-rs.git || true
          
          # 推送代码和标签到 GitCode
          git push gitcode main --tags -f || echo "Failed to push to GitCode"
        env:
          GITCODE_TOKEN: ${{ secrets.GITCODE_TOKEN }}
          GITCODE_EMAIL: ${{ secrets.GITCODE_EMAIL }}

      - name: Create and Upload to GitCode Release
        if: success()
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.VERSION }}"
          $releaseTitle = "${{ steps.get_version.outputs.RELEASE_TITLE }}"
          $tag = "v$version"
          $projectId = "ghost-him%2FZeroLaunch-rs" # 注意这里需要 URL 编码
          
          # 读取生成的 Release Notes
          $releaseNotes = Get-Content -Path "release_notes.txt" -Raw -Encoding UTF8
          
          # 1. 创建 Release (不带附件)
          # GitCode (GitLab) API 需要先创建 Release，然后再附加文件
          $headers = @{
            "Content-Type" = "application/json"
            "PRIVATE-TOKEN" = "${{ secrets.GITCODE_TOKEN }}"
          }
          
          $releaseBody = @{
            tag_name = $tag
            name = $releaseTitle
            description = $releaseNotes
          } | ConvertTo-Json
          
          try {
            # 先尝试删除旧的 Release，确保幂等性
            try {
              Invoke-RestMethod -Uri "https://gitcode.com/api/v4/projects/$projectId/releases/$tag" -Method Delete -Headers $headers -ErrorAction SilentlyContinue
              echo "已删除旧的 GitCode Release"
            } catch {
              echo "没有旧的 GitCode Release 需要删除"
            }
            
            # 创建新的 Release
            Invoke-RestMethod -Uri "https://gitcode.com/api/v4/projects/$projectId/releases" -Method Post -Headers $headers -Body $releaseBody
            echo "✅ GitCode Release 创建成功"
          } catch {
            echo "❌ 创建 GitCode Release 失败: $_"
            exit 1
          }

          # 2. 上传构建产物作为 Release 的附件
          $files = Get-ChildItem -Path . -Include *.exe,*.msi,*.zip -File
          foreach ($file in $files) {
            echo "📦 正在上传 $($file.Name) 到 GitCode Release..."
            
            # GitCode/GitLab 上传附件的 API 比较特殊，需要先将文件上传到项目，获取链接，再将链接附加到 Release
            try {
              $uploadUrl = "https://gitcode.com/api/v4/projects/$projectId/uploads"
              $uploadHeaders = @{
                "PRIVATE-TOKEN" = "${{ secrets.GITCODE_TOKEN }}"
              }
              
              # 使用 curl 上传文件，Invoke-RestMethod 对 multipart/form-data 支持不佳
              $responseJson = curl.exe -s -X POST -H "PRIVATE-TOKEN: ${{ secrets.GITCODE_TOKEN }}" -F "file=@$($file.FullName)" $uploadUrl
              $responseObj = $responseJson | ConvertFrom-Json
              
              # 获取上传后的文件链接
              $fileUrl = $responseObj.url
              $fileName = $responseObj.alt
              
              # 将上传后的文件链接附加到 Release
              $linkBody = @{
                name = $fileName
                url = "https://gitcode.com/ghost-him/ZeroLaunch-rs$($fileUrl)" # 需要拼接成完整 URL
              } | ConvertTo-Json
              
              $attachUrl = "https://gitcode.com/api/v4/projects/$projectId/releases/$tag/assets/links"
              Invoke-RestMethod -Uri $attachUrl -Method Post -Headers $headers -Body $linkBody
              
              echo "✅ 已上传并附加: $($file.Name)"
            } catch {
              echo "❌ 上传或附加 $($file.Name) 失败: $_"
              throw "Failed to upload $($file.Name) to GitCode"
            }
          }
          
          echo "✅ GitCode Release 所有文件上传完成"
        env:
          GITCODE_TOKEN: ${{ secrets.GITCODE_TOKEN }}

  notify:
    name: Notify on completion
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Notify build status
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ Build and release completed successfully!"
          else
            echo "❌ Build failed!"
            exit 1
          fi
